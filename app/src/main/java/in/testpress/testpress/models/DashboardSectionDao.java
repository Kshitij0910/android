package in.testpress.testpress.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import in.testpress.util.IntegerList;
import in.testpress.util.IntegerListConverter;

import in.testpress.testpress.models.DashboardSection;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DASHBOARD_SECTION".
*/
public class DashboardSectionDao extends AbstractDao<DashboardSection, String> {

    public static final String TABLENAME = "DASHBOARD_SECTION";

    /**
     * Properties of entity DashboardSection.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Slug = new Property(0, String.class, "slug", true, "SLUG");
        public final static Property DisplayName = new Property(1, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property ContentType = new Property(3, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property Order = new Property(4, String.class, "order", false, "ORDER");
        public final static Property DisplayType = new Property(5, String.class, "displayType", false, "DISPLAY_TYPE");
        public final static Property Items = new Property(6, String.class, "items", false, "ITEMS");
    };

    private final IntegerListConverter itemsConverter = new IntegerListConverter();

    public DashboardSectionDao(DaoConfig config) {
        super(config);
    }
    
    public DashboardSectionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DASHBOARD_SECTION\" (" + //
                "\"SLUG\" TEXT PRIMARY KEY NOT NULL ," + // 0: slug
                "\"DISPLAY_NAME\" TEXT," + // 1: displayName
                "\"URL\" TEXT," + // 2: url
                "\"CONTENT_TYPE\" TEXT," + // 3: contentType
                "\"ORDER\" TEXT," + // 4: order
                "\"DISPLAY_TYPE\" TEXT," + // 5: displayType
                "\"ITEMS\" TEXT);"); // 6: items
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DASHBOARD_SECTION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DashboardSection entity) {
        stmt.clearBindings();
 
        String slug = entity.getSlug();
        if (slug != null) {
            stmt.bindString(1, slug);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(2, displayName);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(4, contentType);
        }
 
        String order = entity.getOrder();
        if (order != null) {
            stmt.bindString(5, order);
        }
 
        String displayType = entity.getDisplayType();
        if (displayType != null) {
            stmt.bindString(6, displayType);
        }
 
        IntegerList items = entity.getItems();
        if (items != null) {
            stmt.bindString(7, itemsConverter.convertToDatabaseValue(items));
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DashboardSection readEntity(Cursor cursor, int offset) {
        DashboardSection entity = new DashboardSection( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // slug
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // displayName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contentType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // order
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // displayType
            cursor.isNull(offset + 6) ? null : itemsConverter.convertToEntityProperty(cursor.getString(offset + 6)) // items
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DashboardSection entity, int offset) {
        entity.setSlug(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDisplayName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContentType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrder(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDisplayType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setItems(cursor.isNull(offset + 6) ? null : itemsConverter.convertToEntityProperty(cursor.getString(offset + 6)));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(DashboardSection entity, long rowId) {
        return entity.getSlug();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(DashboardSection entity) {
        if(entity != null) {
            return entity.getSlug();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
