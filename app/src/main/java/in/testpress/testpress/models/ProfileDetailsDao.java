package in.testpress.testpress.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import in.testpress.testpress.models.ProfileDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROFILE_DETAILS".
*/
public class ProfileDetailsDao extends AbstractDao<ProfileDetails, Long> {

    public static final String TABLENAME = "PROFILE_DETAILS";

    /**
     * Properties of entity ProfileDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property DisplayName = new Property(3, String.class, "displayName", false, "DISPLAY_NAME");
        public final static Property FirstName = new Property(4, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(5, String.class, "lastName", false, "LAST_NAME");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Photo = new Property(7, String.class, "photo", false, "PHOTO");
        public final static Property LargeImage = new Property(8, String.class, "largeImage", false, "LARGE_IMAGE");
        public final static Property MediumImage = new Property(9, String.class, "mediumImage", false, "MEDIUM_IMAGE");
        public final static Property BirthDate = new Property(10, String.class, "birthDate", false, "BIRTH_DATE");
        public final static Property Gender = new Property(11, String.class, "gender", false, "GENDER");
        public final static Property Address1 = new Property(12, String.class, "address1", false, "ADDRESS1");
        public final static Property Address2 = new Property(13, String.class, "address2", false, "ADDRESS2");
        public final static Property City = new Property(14, String.class, "city", false, "CITY");
        public final static Property Zip = new Property(15, String.class, "zip", false, "ZIP");
        public final static Property State = new Property(16, String.class, "state", false, "STATE");
        public final static Property StateChoices = new Property(17, String.class, "stateChoices", false, "STATE_CHOICES");
        public final static Property Phone = new Property(18, String.class, "phone", false, "PHONE");
    };


    public ProfileDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public ProfileDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROFILE_DETAILS\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"USERNAME\" TEXT," + // 2: username
                "\"DISPLAY_NAME\" TEXT," + // 3: displayName
                "\"FIRST_NAME\" TEXT," + // 4: firstName
                "\"LAST_NAME\" TEXT," + // 5: lastName
                "\"EMAIL\" TEXT," + // 6: email
                "\"PHOTO\" TEXT," + // 7: photo
                "\"LARGE_IMAGE\" TEXT," + // 8: largeImage
                "\"MEDIUM_IMAGE\" TEXT," + // 9: mediumImage
                "\"BIRTH_DATE\" TEXT," + // 10: birthDate
                "\"GENDER\" TEXT," + // 11: gender
                "\"ADDRESS1\" TEXT," + // 12: address1
                "\"ADDRESS2\" TEXT," + // 13: address2
                "\"CITY\" TEXT," + // 14: city
                "\"ZIP\" TEXT," + // 15: zip
                "\"STATE\" TEXT," + // 16: state
                "\"STATE_CHOICES\" TEXT," + // 17: stateChoices
                "\"PHONE\" TEXT);"); // 18: phone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROFILE_DETAILS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProfileDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(4, displayName);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(5, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(6, lastName);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(8, photo);
        }
 
        String largeImage = entity.getLargeImage();
        if (largeImage != null) {
            stmt.bindString(9, largeImage);
        }
 
        String mediumImage = entity.getMediumImage();
        if (mediumImage != null) {
            stmt.bindString(10, mediumImage);
        }
 
        String birthDate = entity.getBirthDate();
        if (birthDate != null) {
            stmt.bindString(11, birthDate);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(12, gender);
        }
 
        String address1 = entity.getAddress1();
        if (address1 != null) {
            stmt.bindString(13, address1);
        }
 
        String address2 = entity.getAddress2();
        if (address2 != null) {
            stmt.bindString(14, address2);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(15, city);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(16, zip);
        }
 
        String state = entity.getState();
        if (state != null) {
            stmt.bindString(17, state);
        }
 
        String stateChoices = entity.getStateChoices();
        if (stateChoices != null) {
            stmt.bindString(18, stateChoices);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(19, phone);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProfileDetails readEntity(Cursor cursor, int offset) {
        ProfileDetails entity = new ProfileDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // displayName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // firstName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // photo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // largeImage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mediumImage
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // birthDate
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // gender
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // address1
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // address2
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // city
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // zip
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // state
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // stateChoices
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // phone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProfileDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDisplayName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirstName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhoto(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLargeImage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMediumImage(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBirthDate(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGender(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setAddress1(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAddress2(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCity(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setZip(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setState(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setStateChoices(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPhone(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProfileDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProfileDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
