package in.testpress.testpress.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import in.testpress.testpress.models.UserStatDates;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_STAT_DATES".
*/
public class UserStatDatesDao extends AbstractDao<UserStatDates, Void> {

    public static final String TABLENAME = "USER_STAT_DATES";

    /**
     * Properties of entity UserStatDates.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property MonthStart = new Property(0, String.class, "monthStart", false, "MONTH_START");
        public final static Property MonthEnd = new Property(1, String.class, "monthEnd", false, "MONTH_END");
        public final static Property YearStart = new Property(2, String.class, "yearStart", false, "YEAR_START");
        public final static Property YearEnd = new Property(3, String.class, "yearEnd", false, "YEAR_END");
        public final static Property WeekStart = new Property(4, String.class, "weekStart", false, "WEEK_START");
        public final static Property WeekEnd = new Property(5, String.class, "weekEnd", false, "WEEK_END");
    };


    public UserStatDatesDao(DaoConfig config) {
        super(config);
    }
    
    public UserStatDatesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_STAT_DATES\" (" + //
                "\"MONTH_START\" TEXT," + // 0: monthStart
                "\"MONTH_END\" TEXT," + // 1: monthEnd
                "\"YEAR_START\" TEXT," + // 2: yearStart
                "\"YEAR_END\" TEXT," + // 3: yearEnd
                "\"WEEK_START\" TEXT," + // 4: weekStart
                "\"WEEK_END\" TEXT);"); // 5: weekEnd
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_STAT_DATES\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserStatDates entity) {
        stmt.clearBindings();
 
        String monthStart = entity.getMonthStart();
        if (monthStart != null) {
            stmt.bindString(1, monthStart);
        }
 
        String monthEnd = entity.getMonthEnd();
        if (monthEnd != null) {
            stmt.bindString(2, monthEnd);
        }
 
        String yearStart = entity.getYearStart();
        if (yearStart != null) {
            stmt.bindString(3, yearStart);
        }
 
        String yearEnd = entity.getYearEnd();
        if (yearEnd != null) {
            stmt.bindString(4, yearEnd);
        }
 
        String weekStart = entity.getWeekStart();
        if (weekStart != null) {
            stmt.bindString(5, weekStart);
        }
 
        String weekEnd = entity.getWeekEnd();
        if (weekEnd != null) {
            stmt.bindString(6, weekEnd);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public UserStatDates readEntity(Cursor cursor, int offset) {
        UserStatDates entity = new UserStatDates( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // monthStart
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // monthEnd
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // yearStart
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // yearEnd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // weekStart
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // weekEnd
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserStatDates entity, int offset) {
        entity.setMonthStart(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMonthEnd(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setYearStart(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYearEnd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeekStart(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWeekEnd(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(UserStatDates entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(UserStatDates entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
