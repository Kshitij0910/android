package in.testpress.testpress.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import in.testpress.testpress.models.UserStats;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_STATS".
*/
public class UserStatsDao extends AbstractDao<UserStats, Long> {

    public static final String TABLENAME = "USER_STATS";

    /**
     * Properties of entity UserStats.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property DateFrom = new Property(1, String.class, "dateFrom", false, "DATE_FROM");
        public final static Property AttemptsCount = new Property(2, Integer.class, "attemptsCount", false, "ATTEMPTS_COUNT");
        public final static Property AttemptsCountDifference = new Property(3, Integer.class, "attemptsCountDifference", false, "ATTEMPTS_COUNT_DIFFERENCE");
        public final static Property VideoWatchedDuration = new Property(4, String.class, "videoWatchedDuration", false, "VIDEO_WATCHED_DURATION");
        public final static Property VideoWatchedDurationDifference = new Property(5, String.class, "videoWatchedDurationDifference", false, "VIDEO_WATCHED_DURATION_DIFFERENCE");
        public final static Property Category = new Property(6, String.class, "category", false, "CATEGORY");
    };


    public UserStatsDao(DaoConfig config) {
        super(config);
    }
    
    public UserStatsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_STATS\" (" + //
                "\"ID\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE_FROM\" TEXT," + // 1: dateFrom
                "\"ATTEMPTS_COUNT\" INTEGER," + // 2: attemptsCount
                "\"ATTEMPTS_COUNT_DIFFERENCE\" INTEGER," + // 3: attemptsCountDifference
                "\"VIDEO_WATCHED_DURATION\" TEXT," + // 4: videoWatchedDuration
                "\"VIDEO_WATCHED_DURATION_DIFFERENCE\" TEXT," + // 5: videoWatchedDurationDifference
                "\"CATEGORY\" TEXT);"); // 6: category
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_STATS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserStats entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dateFrom = entity.getDateFrom();
        if (dateFrom != null) {
            stmt.bindString(2, dateFrom);
        }
 
        Integer attemptsCount = entity.getAttemptsCount();
        if (attemptsCount != null) {
            stmt.bindLong(3, attemptsCount);
        }
 
        Integer attemptsCountDifference = entity.getAttemptsCountDifference();
        if (attemptsCountDifference != null) {
            stmt.bindLong(4, attemptsCountDifference);
        }
 
        String videoWatchedDuration = entity.getVideoWatchedDuration();
        if (videoWatchedDuration != null) {
            stmt.bindString(5, videoWatchedDuration);
        }
 
        String videoWatchedDurationDifference = entity.getVideoWatchedDurationDifference();
        if (videoWatchedDurationDifference != null) {
            stmt.bindString(6, videoWatchedDurationDifference);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(7, category);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserStats readEntity(Cursor cursor, int offset) {
        UserStats entity = new UserStats( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dateFrom
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // attemptsCount
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // attemptsCountDifference
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // videoWatchedDuration
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // videoWatchedDurationDifference
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // category
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserStats entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDateFrom(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAttemptsCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAttemptsCountDifference(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setVideoWatchedDuration(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideoWatchedDurationDifference(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategory(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserStats entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserStats entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
